version: "3.6"

networks:
  default:
    name: traefik
    external: true

services:
  portainer:
    image: portainer/portainer-ce:latest
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    labels:
      com.centurylinklabs.watchtower.enable: true
      traefik.enable: true
      # Frontend
      traefik.http.routers.frontend.rule: Host(`portainer.${ROOT_URL}`)
      traefik.http.routers.frontend.service: frontend
      traefik.http.services.frontend.loadbalancer.server.port: 9000

      # Edge
      traefik.http.routers.edge.rule: Host(`edge.${ROOT_URL}`)
      traefik.http.routers.edge.service: edge
      traefik.http.services.edge.loadbalancer.server.port: 8000
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer:/data

  traefik:
    image: traefik:v2.8
    command:
      - "--log.level=INFO"
    depends_on:
      init:
        condition: service_completed_successfully
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      ROOT_URL: ${ROOT_URL}
      TZ: ${TZ}
    env_file:
      - ./credentials.env
    extra_hosts:
      - host.docker.internal:172.17.0.1 # Needed to avoid Bad Gateway error message when redirecting to host network (e.g. for homeassistant).
    labels:
      com.centurylinklabs.watchtower.enable: true
      traefik.enable: true
      # configuration for traefik authentication
      traefik.http.middlewares.traefik-auth.basicauth.users: $TRAEFIK_AUTH
      traefik.http.routers.traefik.middlewares: traefik-auth

      # define resolver configuration
      traefik.http.routers.traefik.tls.certresolver: cloudflare
      traefik.http.routers.traefik.tls.domains[0].main: ${ROOT_URL}
      traefik.http.routers.traefik.tls.domains[0].sans: "*.${ROOT_URL}"
      traefik.http.routers.traefik.service: api@internal
    ports:
      # - 53:53 # deactivated, as dns is conflicting with bind service
      # - 69:69/udp # deactivated, as tftp seems not to work on bridge (behind traefik) https://github.com/linuxserver/docker-netbootxyz/issues/11
      # - 8080:8080/udp # UDP Testing
      - 80:80
      - 443:443
      - 8883:8883 # MQTT over TLS
    restart: always
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/traefik.yml:ro
      - ./traefik/acme.json:/acme.json

  ## Watchtower upgrades services automatically
  watchtower:
    image: containrrr/watchtower
    # For testing purposes, set the interval to 30 seconds
    # command: --interval 30
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_LABEL_ENABLE: "true" # Update containers that have a com.centurylinklabs.watchtower.enable label set to true.
      WATCHTOWER_POLL_INTERVAL: 7200 # checks for updates every two hours
    restart: unless-stopped
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "${HOME}/.docker/config.json:/config.json" # optional, for authentication if you have a Docker Hub account

  ## Config dir needs to be writable by uid/gid 1000
  ## This container sets the right permissions and exits
  init:
    image: busybox:latest
    command:
      - /bin/sh
      - -c
      - |
        touch /traefik/acme.json
        chmod 600 /traefik/acme.json
        chown -R 1000:1000 /traefik
    volumes:
      - ./traefik:/traefik
    labels:
      org.prind.service: init

  certsync:
    image: stedolan/jq
    # Dumps both certificate and key for the given domain $ROOT_URL
    entrypoint: |
      /bin/bash -c "
        jq -r '.cloudflare.Certificates[] | select(.domain.main==\"${ROOT_URL}\") | .certificate' /data/acme.json | base64 -d > /out/${ROOT_URL}_cert.pem;
        jq -r '.cloudflare.Certificates[] | select(.domain.main==\"${ROOT_URL}\") | .key' /data/acme.json | base64 -d > /out/${ROOT_URL}_key.pem;
      "
    volumes:
      - ./traefik/acme.json:/data/acme.json:ro
      - tls_cert:/out # And whichever volume you want to output on
    deploy:
      mode: global
      placement:
        constraints: [node.role==manager] # Only run on the manager node (Where traefik and its volume exists)
      restart_policy:
        delay: 24h # Re-run every 24 hours
      resources:
        limits: { cpus: '0.1', memory: '32M' }
        reservations: { cpus: '0.025', memory: '16M' }


volumes:
  portainer_data:
  tls_cert:
    external: true  
